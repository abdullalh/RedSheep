# -*- coding: utf-8 -*-
"""classes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-xg6OziViw_Qi8WCu2xCYnnM-tXt1ZCv
"""

from typing import List

# Parent class for Room Types
class Room:
    def __init__(self, room_number: int, room_type: str, amenities: List[str], price_per_night: float):
        # Initialize room attributes
        self._room_number = room_number  # Room number
        self._type = room_type            # Type of room (Standard, Deluxe, Suite)
        self._amenities = amenities        # List of amenities available in the room
        self._price_per_night = price_per_night  # Price per night for the room
        self._is_available = True          # Availability status of the room

    def get_room_number(self) -> int:
        return self._room_number  # Return the room number

    def set_room_number(self, room_number: int):
        self._room_number = room_number  # Set the room number

    def get_type(self) -> str:
        return self._type  # Return the type of room

    def set_type(self, room_type: str):
        self._type = room_type  # Set the type of room

    def get_amenities(self) -> List[str]:
        return self._amenities  # Return the list of amenities

    def set_amenities(self, amenities: List[str]):
        self._amenities = amenities  # Set the list of amenities

    def get_price_per_night(self) -> float:
        return self._price_per_night  # Return the price per night

    def set_price_per_night(self, price_per_night: float):
        self._price_per_night = price_per_night  # Set the price per night

    def is_available(self) -> bool:
        return self._is_available  # Return the availability status

    def set_available(self, is_available: bool):
        self._is_available = is_available  # Set the availability status

    def book_room(self) -> bool:
        # Book the room if available
        if self._is_available:
            self._is_available = False  # Mark room as booked
            return True
        return False  # Room is not available

    def check_out(self):
        self._is_available = True  # Mark room as available upon checkout

    def get_room_details(self) -> str:
        # Return a string with room details
        return f"Room Number: {self._room_number}, Type: {self._type}, Amenities: {', '.join(self._amenities)}, Price per Night: {self._price_per_night}"


class StandardRoom(Room):
    def __init__(self, room_number: int, amenities: List[str], price_per_night: float, bed_size: str, has_tv: bool, has_mini_fridge: bool):
        # Initialize StandardRoom attributes
        super().__init__(room_number, "Standard", amenities, price_per_night)  # Call parent constructor
        self._bed_size = bed_size  # Size of the bed
        self._has_tv = has_tv  # TV availability
        self._has_mini_fridge = has_mini_fridge  # Mini fridge availability

    def get_bed_size(self) -> str:
        return self._bed_size  # Return bed size

    def set_bed_size(self, bed_size: str):
        self._bed_size = bed_size  # Set bed size

    def has_tv(self) -> bool:
        return self._has_tv  # Return TV availability

    def set_has_tv(self, has_tv: bool):
        self._has_tv = has_tv  # Set TV availability

    def has_mini_fridge(self) -> bool:
        return self._has_mini_fridge  # Return mini fridge availability

    def set_has_mini_fridge(self, has_mini_fridge: bool):
        self._has_mini_fridge = has_mini_fridge  # Set mini fridge availability


class DeluxeRoom(Room):
    def __init__(self, room_number: int, amenities: List[str], price_per_night: float, bed_size: str, has_balcony: bool, has_jacuzzi: bool):
        # Initialize DeluxeRoom attributes
        super().__init__(room_number, "Deluxe", amenities, price_per_night)  # Call parent constructor
        self._bed_size = bed_size  # Size of the bed
        self._has_balcony = has_balcony  # Balcony availability
        self._has_jacuzzi = has_jacuzzi  # Jacuzzi availability

    def get_bed_size(self) -> str:
        return self._bed_size  # Return bed size

    def set_bed_size(self, bed_size: str):
        self._bed_size = bed_size  # Set bed size

    def has_balcony(self) -> bool:
        return self._has_balcony  # Return balcony availability

    def set_has_balcony(self, has_balcony: bool):
        self._has_balcony = has_balcony  # Set balcony availability

    def has_jacuzzi(self) -> bool:
        return self._has_jacuzzi  # Return jacuzzi availability

    def set_has_jacuzzi(self, has_jacuzzi: bool):
        self._has_jacuzzi = has_jacuzzi  # Set jacuzzi availability


class SuiteRoom(Room):
    def __init__(self, room_number: int, amenities: List[str], price_per_night: float, has_living_area: bool, has_kitchen: bool, has_private_pool: bool):
        # Initialize SuiteRoom attributes
        super().__init__(room_number, "Suite", amenities, price_per_night)  # Call parent constructor
        self._has_living_area = has_living_area  # Living area availability
        self._has_kitchen = has_kitchen  # Kitchen availability
        self._has_private_pool = has_private_pool  # Private pool availability

    def has_living_area(self) -> bool:
        return self._has_living_area  # Return living area availability

    def set_has_living_area(self, has_living_area: bool):
        self._has_living_area = has_living_area  # Set living area availability

    def has_kitchen(self) -> bool:
        return self._has_kitchen  # Return kitchen availability

    def set_has_kitchen(self, has_kitchen: bool):
        self._has_kitchen = has_kitchen  # Set kitchen availability

    def has_private_pool(self) -> bool:
        return self._has_private_pool  # Return private pool availability

    def set_has_private_pool(self, has_private_pool: bool):
        self._has_private_pool = has_private_pool  # Set private pool availability


class Guest:
    def __init__(self, name: str, contact_info: str, loyalty_status: str):
        # Initialize guest attributes
        self._name = name  # Guest's name
        self._contact_info = contact_info  # Guest's contact information
        self._loyalty_status = loyalty_status  # Guest's loyalty status
        self._booking_history = []  # List to store booking history
        self._loyalty_points = 0  # Loyalty points

    def get_name(self) -> str:
        return self._name  # Return guest's name

    def set_name(self, name: str):
        self._name = name  # Set guest's name

    def get_contact_info(self) -> str:
        return self._contact_info  # Return guest's contact information

    def set_contact_info(self, contact_info: str):
        self._contact_info = contact_info  # Set guest's contact information

    def get_loyalty_status(self) -> str:
        return self._loyalty_status  # Return guest's loyalty status

    def set_loyalty_status(self, loyalty_status: str):
        self._loyalty_status = loyalty_status  # Set guest's loyalty status

    def add_booking(self, booking: 'Booking'):
        self._booking_history.append(booking)  # Add booking to history

    def get_booking_history(self) -> List['Booking']:
        return self._booking_history  # Return booking history

    def get_loyalty_points(self) -> int:
        return self._loyalty_points  # Return loyalty points

    def set_loyalty_points(self, loyalty_points: int):
        self._loyalty_points = loyalty_points  # Set loyalty points

    def redeem_loyalty_points(self, points: int) -> bool:
        # Redeem loyalty points if sufficient points are available
        if points <= self._loyalty_points:
            self._loyalty_points -= points  # Deduct points
            return True
        return False  # Not enough points


class Booking:
    def __init__(self, booking_id: int, room: Room, guest: Guest, check_in_date: str, check_out_date: str):
        # Initialize booking attributes
        self._booking_id = booking_id  # Unique identifier for the booking
        self._room = room  # The room being booked
        self._guest = guest  # The guest making the booking
        self._check_in_date = check_in_date  # Check-in date for the booking
        self._check_out_date = check_out_date  # Check-out date for the booking
        self._total_price = self.calculate_total_price()  # Calculate total price based on stay duration

    def get_booking_id(self) -> int:
        return self._booking_id  # Return the booking ID

    def set_booking_id(self, booking_id: int):
        self._booking_id = booking_id  # Set the booking ID

    def get_room(self) -> Room:
        return self._room  # Return the room associated with the booking

    def set_room(self, room: Room):
        self._room = room  # Set the room for the booking

    def get_guest(self) -> Guest:
        return self._guest  # Return the guest associated with the booking

    def set_guest(self, guest: Guest):
        self._guest = guest  # Set the guest for the booking

    def get_check_in_date(self) -> str:
        return self._check_in_date  # Return the check-in date

    def set_check_in_date(self, check_in_date: str):
        self._check_in_date = check_in_date  # Set the check-in date

    def get_check_out_date(self) -> str:
        return self._check_out_date  # Return the check-out date

    def set_check_out_date(self, check_out_date: str):
        self._check_out_date = check_out_date  # Set the check-out date

    def get_total_price(self) -> float:
        return self._total_price  # Return the total price for the booking

    def calculate_total_price(self) -> float:
        from datetime import datetime  # Import datetime for date calculations
        check_in = datetime.strptime(self._check_in_date, '%Y-%m-%d')  # Convert check-in date string to datetime
        check_out = datetime.strptime(self._check_out_date, '%Y-%m-%d')  # Convert check-out date string to datetime
        days = (check_out - check_in).days  # Calculate the number of days between check-in and check-out
        return days * self._room.get_price_per_night()  # Calculate total price based on room price per night


class Payment:
    def __init__(self, payment_id: int, booking: Booking, amount: float, payment_method: str):
        # Initialize payment attributes
        self._payment_id = payment_id  # Unique identifier for the payment
        self._booking = booking  # The booking associated with this payment
        self._amount = amount  # Amount to be paid
        self._payment_method = payment_method  # Method of payment (e.g., Credit Card, Cash)
        self._payment_status = "Pending"  # Initial payment status

    def get_payment_id(self) -> int:
        return self._payment_id  # Return the payment ID

    def set_payment_id(self, payment_id: int):
        self._payment_id = payment_id  # Set the payment ID

    def get_booking(self) -> Booking:
        return self._booking  # Return the booking associated with this payment

    def set_booking(self, booking: Booking):
        self._booking = booking  # Set the booking for this payment

    def get_amount(self) -> float:
        return self._amount  # Return the amount to be paid

    def set_amount(self, amount: float):
        self._amount = amount  # Set the amount to be paid

    def get_payment_method(self) -> str:
        return self._payment_method  # Return the payment method

    def set_payment_method(self, payment_method: str):
        self._payment_method = payment_method  # Set the payment method

    def get_payment_status(self) -> str:
        return self._payment_status  # Return the payment status

    def set_payment_status(self, payment_status: str):
        self._payment_status = payment_status  # Set the payment status

    def process_payment(self) -> bool:
        self._payment_status = "Completed"  # Mark the payment as completed
        return True  # Indicate that the payment was processed successfully


class LoyaltyProgram:
    def __init__(self, guest: Guest):
        # Initialize loyalty program attributes
        self._guest = guest  # The guest associated with this loyalty program
        self._points = 0  # Initial loyalty points
        self._rewards = []  # List to store rewards

    def get_guest(self) -> Guest:
        return self._guest  # Return the guest associated with this loyalty program

    def set_guest(self, guest: Guest):
        self._guest = guest  # Set the guest for this loyalty program

    def get_points(self) -> int:
        return self._points  # Return the current loyalty points

    def set_points(self, points: int):
        self._points = points  # Set the loyalty points

    def get_rewards(self) -> List[str]:
        return self._rewards  # Return the list of rewards

    def set_rewards(self, rewards: List[str]):
        self._rewards = rewards  # Set the list of rewards

    def redeem_reward(self, reward: str) -> bool:
        # Redeem a reward if it exists in the rewards list
        if reward in self._rewards:
            self._rewards.remove(reward)  # Remove the redeemed reward from the list
            return True  # Indicate successful redemption
        return False  # Reward not found


class GuestServiceRequest:
    def __init__(self, request_id: int, guest: Guest, service_type: str):
        # Initialize guest service request attributes
        self._request_id = request_id  # Unique identifier for the service request
        self._guest = guest  # The guest making the request
        self._service_type = service_type  # Type of service requested
        self._status = "Pending"  # Initial status of the request

    def get_request_id(self) -> int:
        return self._request_id  # Return the request ID

    def set_request_id(self, request_id: int):
        self._request_id = request_id  # Set the request ID

    def get_guest(self) -> Guest:
        return self._guest  # Return the guest associated with this request

    def set_guest(self, guest: Guest):
        self._guest = guest  # Set the guest for this request

    def get_service_type(self) -> str:
        return self._service_type  # Return the type of service requested

    def set_service_type(self, service_type: str):
        self._service_type = service_type  # Set the type of service requested

    def get_status(self) -> str:
        return self._status  # Return the status of the request

    def set_status(self, status: str):
        self._status = status  # Set the status of the request

    def update_status(self, status: str):
        self._status = status  # Update the status of the request


class Feedback:
    def __init__(self, feedback_id: int, guest: Guest, rating: int, comments: str):
        # Initialize feedback attributes
        self._feedback_id = feedback_id  # Unique identifier for the feedback
        self._guest = guest  # The guest providing the feedback
        self._rating = rating  # Rating given by the guest
        self._comments = comments  # Comments provided by the guest

    def get_feedback_id(self) -> int:
        return self._feedback_id  # Return the feedback ID

    def set_feedback_id(self, feedback_id: int):
        self._feedback_id = feedback_id  # Set the feedback ID

    def get_guest(self) -> Guest:
        return self._guest  # Return the guest who provided the feedback

    def set_guest(self, guest: Guest):
        self._guest = guest  # Set the guest for this feedback

    def get_rating(self) -> int:
        return self._rating  # Return the rating given by the guest

    def set_rating(self, rating: int):
        self._rating = rating  # Set the rating given by the guest

    def get_comments(self) -> str:
        return self._comments  # Return the comments provided by the guest

    def set_comments(self, comments: str):
        self._comments = comments  # Set the comments provided by the guest


class Hotel:
    def __init__(self, hotel_name: str):
        # Initialize hotel attributes
        self._hotel_name = hotel_name  # Name of the hotel
        self._rooms = []  # List to store rooms in the hotel
        self._guests = []  # List to store guests in the hotel
        self._bookings = []  # List to store bookings made in the hotel

    def add_room(self, room: Room):
        self._rooms.append(room)  # Add a room to the hotel's room list

    def add_guest(self, guest: Guest):
        self._guests.append(guest)  # Add a guest to the hotel's guest list

    def add_booking(self, booking: Booking):
        self._bookings.append(booking)  # Add a booking to the hotel's booking list

    def generate_slip(self, booking: Booking, payment: Payment) -> str:
      # Start creating the booking slip with the hotel name
        slip = f"--- {self._hotel_name} Booking Slip ---\n"
         # Add guest's name to the slip
        slip += f"Guest Name: {booking.get_guest().get_name()}\n"
            # Add guest's contact information to the slip
        slip += f"Contact Info: {booking.get_guest().get_contact_info()}\n"
            # Add guest's loyalty status to the slip
        slip += f"Loyalty Status: {booking.get_guest().get_loyalty_status()}\n"
            # Add booking ID to the slip
        slip += f"Booking ID: {booking.get_booking_id()}\n"
            # Add room details to the slip
        slip += f"Room Details: {booking.get_room().get_room_details()}\n"
            # Add check-in date to the slip
        slip += f"Check-in Date: {booking.get_check_in_date()}\n"
            # Add check-out date to the slip
        slip += f"Check-out Date: {booking.get_check_out_date()}\n"
            # Add total price of the booking to the slip
        slip += f"Total Price: {booking.get_total_price()}\n"
           # Add payment method to the slip
        slip += f"Payment Method: {payment.get_payment_method()}\n"
            # Add payment status to the slip
        slip += f"Payment Status: {payment.get_payment_status()}\n"
        slip += "-----------------------------------"
           # Return the complete booking slip as a string
        return slip




# Example usage
if __name__ == "__main__":
    # Create a new hotel instance with the name "Royal Stay Hotel"
    hotel = Hotel("Royal Stay Hotel")

    # Create a new standard room and add it to the hotel
    room1 = StandardRoom(101, ["WiFi", "Air Conditioning"], 100.0, "Queen", True, True)
    hotel.add_room(room1)

    # Create a new guest and add them to the hotel
    guest1 = Guest("Aysha", "aysha@gmail.com", "Gold")
    hotel.add_guest(guest1)

    # Create a new booking for the guest and the room, specifying check-in and check-out dates
    booking1 = Booking(1, room1, guest1, "2023-10-01", "2023-10-05")
    hotel.add_booking(booking1)

    # Create a new payment for the booking, specifying the payment method
    payment1 = Payment(1, booking1, booking1.get_total_price(), "Credit Card")
    payment1.process_payment()  # Process the payment

    # Generate and print the booking slip for the booking and payment
    slip = hotel.generate_slip(booking1, payment1)
    print(slip)

    # Example of creating a guest service request
    service_request1 = GuestServiceRequest(1, guest1, "Extra towels")
    print("---Guest service request---")
    # Print details of the service request
    print(f"Service Request ID: {service_request1.get_request_id()}, Guest: {service_request1.get_guest().get_name()}, Service Type: {service_request1.get_service_type()}, Status: {service_request1.get_status()}")

    # Example of creating feedback from the guest
    print("---Feedback From Guest---")
    feedback1 = Feedback(1, guest1, 5, "Great stay!")  # Create feedback with a rating and comments
    # Print the feedback details
    print(f"Feedback from {feedback1.get_guest().get_name()}: {feedback1.get_comments()} (Rating: {feedback1.get_rating()})")